(()=>{"use strict";var e={113:e=>{e.exports=require("crypto")}},t={};function r(a){var s=t[a];if(void 0!==s)return s.exports;var o=t[a]={exports:{}};return e[a](o,o.exports,r),o.exports}var a={};(()=>{var e=a;Object.defineProperty(e,"__esModule",{value:!0}),e.password=e.sha512=e.sha256=e.md5=e.decrypt=e.encrypt=e.random=void 0;const t=r(113);e.random=(e=8)=>(0,t.randomBytes)(e).toString("hex"),e.encrypt=(e,r)=>{let a=(0,t.randomBytes)(16);const s=(0,t.scryptSync)(r,"salt",32);let o=(0,t.createCipheriv)("aes-256-cbc",s,a),c=o.update(e);return c=Buffer.concat([c,o.final()]),a.toString("hex")+":"+c.toString("hex")},e.decrypt=(e,r)=>{let a=e.split(":"),s=Buffer.from(a[0],"hex");const o=(0,t.scryptSync)(r,"salt",32);let c=(0,t.createDecipheriv)("aes-256-cbc",o,s),n=c.update(Buffer.from(a[1],"hex"));return n=Buffer.concat([n,c.final()]),n.toString()},e.md5=(...e)=>(0,t.createHash)("md5").update(e.join(""),"utf8").digest("hex");const s=e=>(0,t.createHash)("sha256").update(e,"utf8").digest("hex");e.sha256=s;const o=e=>(0,t.createHash)("sha512").update(e,"utf8").digest("hex");e.sha512=o,e.password=e=>s(o(e))})();var s=exports;for(var o in a)s[o]=a[o];a.__esModule&&Object.defineProperty(s,"__esModule",{value:!0})})();